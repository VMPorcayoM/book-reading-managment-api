type Query {
    userById(id: ID!): UserOut
    allUsers: [UserOut]
    bookById(id: ID!): Book
    allBooks: [Book]
}

type Mutation {
    createUser(user: UserInput): UserOut
    login(username: String!, password: String!): SessionToken
    createOrUpdateBook(book: BookInput): Book
}

type UserOut {
    id: ID!
    name: String!
    username: String!
    email: String!
}

input UserInput {
    name: String!
    username: String!
    email: String!
    password: String!
}

type SessionToken {
    token: String!
    user: UserOut!
    expiresAt: String!  # Considera si es una cadena o un tipo de fecha
}

input BookInput {
    title: String!
    publicationDate: String!  # Considera usar un tipo de fecha si aplica
    author: AuthorInput!
    genre: GenreInput!
}

type Book {
    id: ID!
    title: String!
    publicationDate: String!  # Considera usar un tipo de fecha si aplica
    author: Author!
    genre: Genre!
}

type Author {
    id: ID!
    name: String!
    biography: String
}

type Genre {
    id: ID!
    name: String!
}

input AuthorInput {
    name: String!
    biography: String
}

input GenreInput {
    name: String!
}
